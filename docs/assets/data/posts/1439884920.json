{"title":"High Level Software Engineering Techniques","body":"\u003cp\u003eSome development techniques I find useful when working on large scale projects:\u003c!--more--\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCaching\u003c/li\u003e\n\u003cli\u003eBatching\u003c/li\u003e\n\u003cli\u003eLogging, not just one big file, rotate logs after they reach a reasonable size\u003c/li\u003e\n\u003cli\u003eDefensive programming, check for errors and handling exceptions\u003c/li\u003e\n\u003cli\u003eAutomation – automate routine and boring tasks\u003c/li\u003e\n\u003cli\u003eAggregation\u003c/li\u003e\n\u003cli\u003eDebugging\u003c/li\u003e\n\u003cli\u003eCompression, handling massive data transfer over a network\u003c/li\u003e\n\u003cli\u003eSharding/De-normalization, speed up data lookup\u003c/li\u003e\n\u003cli\u003eAlerting – Send an email when something unexpected happens, most of us have smart phones and will get the email almost instantly -\u003c/li\u003e\n\u003cli\u003eModularization: breaking a system into smaller modules that communicate with each other to achieve a task\u003c/li\u003e\n\u003cli\u003eNoSQL -\u003c/li\u003e\n\u003cli\u003eQueuing: Some things can be done later, put them in a queue and process at a much convenient time. Also helps reduce load on your servers\u003c/li\u003e\n\u003cli\u003ePolling: Constantly checking up on data e.g to fix it, or alert about change\u003c/li\u003e\n\u003cli\u003eMap/Reduce ?\u003c/li\u003e\n\u003cli\u003eTDD – think about how you will test something before you write it\u003c/li\u003e\n\u003cli\u003ePrioritizing: When queues dont cut it, then maybe prioritize the queue\u003c/li\u003e\n\u003cli\u003eParallelization: When you need to process a lot of data in the shortest time possible . Consider distributing the load across multiple machines to run in parallel\u003c/li\u003e\n\u003cli\u003eNeutralize instead of validate e.g (int)$age instead of if(!is_int($age))\u003c/li\u003e\n\u003c/ul\u003e"}